class ExpenseTracker:
    def __init__(self, dream_annual_income):
        self.dream_annual_income = dream_annual_income
        self.dream_monthly_income = dream_annual_income / 12
        self.dream_weekly_income = dream_annual_income / 52
        self.dream_daily_income = dream_annual_income / 365
        self.expenses = {month: [] for month in range(1, 13)}

    def track_expenses(self):
        while True:
            try:
                day_expenses = float(input("\nEnter your daily expenses (enter 0 to finish for the day): $"))
            except ValueError:
                print("Invalid input. Please enter a valid number.")
                continue

            if day_expenses == 0:
                break

            month = input("Enter the month (1-12): ")
            if not month.isdigit() or int(month) not in range(1, 13):
                print("Invalid month. Please enter a number between 1 and 12.")
                continue

            self.expenses[int(month)].append(day_expenses)

    def calculate_summary(self):
        total_expenses = 0
        total_days = 0

        for month, month_expenses in self.expenses.items():
            total_expenses += sum(month_expenses)
            total_days += len(month_expenses)

        total_income_earned = self.dream_daily_income * total_days
        percent_of_dream_income_earned = (total_income_earned / self.dream_annual_income) * 100

        print("\nIncome and Expense Summary:")
        print(f"Desired Annual Income: ${self.dream_annual_income}")
        print(f"Total Expenses: ${total_expenses:.2f}")
        print(f"Total Days: {total_days}")
        print(f"Total Income Earned: ${total_income_earned:.2f}")
        print(f"Percentage of Desired Income Earned: {percent_of_dream_income_earned:.2f}%")

def main():
    # Desired annual income: $60,705
    dream_annual_income = 60705
    tracker = ExpenseTracker(dream_annual_income)

    # Track expenses for 12 months
    for _ in range(12):
        tracker.track_expenses()

    # Calculate and print summary
    tracker.calculate_summary()

if __name__ == "__main__":
    main()
